{
    "options": {
        "inference.normalize": "false",
        "runtime.db.intids": true,
        "runtime.log.level": "TRACE",
        "runtime.learn.method": "BinaryCrossEntropy",
        "runtime.validation": "true",
        "gradientdescent.savevalidationweights": "true",
        "categoricalevaluator.defaultpredicate": "ImageSum",
        "gradientdescent.numsteps": "10000",
        "gradientdescent.runfulliterations": "false",
        "gradientdescent.stepsize": "1.0e-3",
        "weightlearning.inference": "DualBCDInference",
        "runtime.inference.method": "DualBCDInference",
        "duallcqp.computeperiod": "10",
        "duallcqp.maxiterations": "10000",
        "duallcqp.primaldualthreshold": "0.001",
        "duallcqp.regularizationparameter": "1.0e-3",
        "gradientdescent.negativeentropyregularization": "0.0",
        "gradientdescent.negativelogregularization": "1.0e-3",
        "minimizer.initialsquaredpenalty": "10.0",
        "minimizer.objectivedifferencetolerance": "1.0e-5",
        "minimizer.proxruleweight": "1.0e-2",
        "runtime.learn.output.model.path": "./mnist-addition_learned.psl",
        "gradientdescent.scalestepsize": "false",
        "minimizer.numinternaliterations": "500"
    },
    "rules": [
        "0 * ImageSumBlock(ImageId1, ImageId2) + 0 * DigitSumOnesPlace('0', X, Y, Z) + ImageDigit(ImageId1, X) + ImageDigit(ImageId2, Y) <= SumPlace(ImageId1, ImageId2, '1', Z) + 1.0 .",
        "0 * ImageSumBlock(ImageId1, ImageId2) + 0 * DigitSumOnesPlace('0', X, Y, Z) + ImageDigit(ImageId1, X) + SumPlace(ImageId1, ImageId2, '1', Z) <= ImageDigit(ImageId2, Y) + 1.0 .",
        "0 * ImageSumBlock(ImageId1, ImageId2) + 0 * DigitSumOnesPlace('0', X, Y, Z) + ImageDigit(ImageId2, X) + SumPlace(ImageId1, ImageId2, '1', Z) <= ImageDigit(ImageId1, Y) + 1.0 .",
        "0 * ImageSumBlock(ImageId1, ImageId2) + 0 * DigitSumTensPlace('0', X, Y, Z) + ImageDigit(ImageId1, X) + ImageDigit(ImageId2, Y) <= Carry(ImageId1, ImageId2, Z) + 1.0 .",
        "0 * ImageSumBlock(ImageId1, ImageId2) + 0 * DigitSumTensPlace('0', X, Y, Z) + Carry(ImageId1, ImageId2, Z) + ImageDigit(ImageId1, X) <= ImageDigit(ImageId2, Y) + 1.0 .",
        "0 * ImageSumBlock(ImageId1, ImageId2) + 0 * DigitSumTensPlace('0', X, Y, Z) + ImageDigit(ImageId2, Y) + Carry(ImageId1, ImageId2, Z) <= ImageDigit(ImageId1, X) + 1.0 .",
        "ImageSumBlock(ImageId1, ImageId2) & PlacedRepresentation(Z_10, Z_1, Z) & SumPlace(ImageId1, ImageId2, '1', Z_1) & SumPlace(ImageId1, ImageId2, '10', Z_10) -> ImageSum(ImageId1, ImageId2, Z) .",
        "ImageSumBlock(ImageId1, ImageId2) & PlacedRepresentation(Z_10, Z_1, Z) & ImageSum(ImageId1, ImageId2, Z) & SumPlace(ImageId1, ImageId2, '1', Z_1) -> SumPlace(ImageId1, ImageId2, '10', Z_10) .",
        "ImageSumBlock(ImageId1, ImageId2) & PlacedRepresentation(Z_10, Z_1, Z) & SumPlace(ImageId1, ImageId2, '10', Z_10) & ImageSum(ImageId1, ImageId2, Z) -> SumPlace(ImageId1, ImageId2, '1', Z_1) .",
        "1.0: NeuralClassifier(ImageId, X) = ImageDigit(ImageId, X) ^2",
        "ImageSum(ImageId1, ImageId2, +Z) = 1 .",
        "SumPlace(ImageId1, ImageId2, P, +Z) = 1 .",
        "Carry(ImageIdX, ImageIdY, +W) = 1 ."
    ],
    "predicates": {
        "NeuralClassifier/2": {
            "type": "DeepPredicate",
            "options": {
                "model-path": "./neupsl_models/neupsl_neural_model.py::MNISTAdditionModel",
                "entity-data-map-path": "../data/experiment::mnist-1/split::0/train-size::0080/overlap::1.00/entity-data-map.txt",
                "entity-argument-indexes": "0",
                "class-size": 10,
                "save-path": "../data/experiment::mnist-1/split::0/train-size::0080/overlap::1.00/saved-networks/nesy-trained/trained_model.pt",
                "alpha": 1.0,
                "learning-rate": "1.0e-3",
                "dropout": "0.1"
            },
            "targets": {
                "learn": [
                    "../data/experiment::mnist-1/split::0/train-size::0080/overlap::1.00/image-target-train.txt"
                ],
                "validation": [
                    "../data/experiment::mnist-1/split::0/train-size::0040/overlap::0.00/image-target-valid.txt"
                ],
                "infer": [
                    "../data/experiment::mnist-1/split::0/train-size::0080/overlap::1.00/image-target-test.txt"
                ]
            }
        },
        "ImageDigit/2": {
            "targets": {
                "learn": [
                    "../data/experiment::mnist-1/split::0/train-size::0080/overlap::1.00/image-target-train.txt"
                ],
                "validation": [
                    "../data/experiment::mnist-1/split::0/train-size::0040/overlap::0.00/image-target-valid.txt"
                ],
                "infer": [
                    "../data/experiment::mnist-1/split::0/train-size::0080/overlap::1.00/image-target-test.txt"
                ]
            }
        },
        "ImageSum/3": {
            "evaluations": [
                {
                    "evaluator": "CategoricalEvaluator",
                    "options": {
                        "categoricalevaluator.categoryindexes": 2,
                        "eval.includeobs": false
                    }
                }
            ],
            "targets": {
                "learn": [
                    "../data/experiment::mnist-1/split::0/train-size::0080/overlap::1.00/image-sum-target-train.txt"
                ],
                "validation": [
                    "../data/experiment::mnist-1/split::0/train-size::0040/overlap::0.00/image-sum-target-valid.txt"
                ],
                "infer": [
                    "../data/experiment::mnist-1/split::0/train-size::0080/overlap::1.00/image-sum-target-test.txt"
                ]
            },
            "truth": {
                "learn": [
                    "../data/experiment::mnist-1/split::0/train-size::0080/overlap::1.00/image-sum-truth-train.txt"
                ],
                "validation": [
                    "../data/experiment::mnist-1/split::0/train-size::0040/overlap::0.00/image-sum-truth-valid.txt"
                ],
                "infer": [
                    "../data/experiment::mnist-1/split::0/train-size::0080/overlap::1.00/image-sum-truth-test.txt"
                ]
            }
        },
        "SumPlace/4": {
            "evaluations": [
                {
                    "evaluator": "CategoricalEvaluator",
                    "options": {
                        "categoricalevaluator.categoryindexes": 3,
                        "eval.includeobs": false
                    }
                }
            ],
            "options": {
                "batch-source": false
            },
            "targets": {
                "learn": [
                    "../data/experiment::mnist-1/split::0/train-size::0080/overlap::1.00/image-sum-place-target-train.txt"
                ],
                "validation": [
                    "../data/experiment::mnist-1/split::0/train-size::0040/overlap::0.00/image-sum-place-target-valid.txt"
                ],
                "infer": [
                    "../data/experiment::mnist-1/split::0/train-size::0080/overlap::1.00/image-sum-place-target-test.txt"
                ]
            },
            "truth": {
                "learn": [
                    "../data/experiment::mnist-1/split::0/train-size::0080/overlap::1.00/image-sum-place-truth-train.txt"
                ],
                "validation": [
                    "../data/experiment::mnist-1/split::0/train-size::0040/overlap::0.00/image-sum-place-truth-valid.txt"
                ],
                "infer": [
                    "../data/experiment::mnist-1/split::0/train-size::0080/overlap::1.00/image-sum-place-truth-test.txt"
                ]
            }
        },
        "ImageSumBlock/2": {
            "observations": {
                "learn": [
                    "../data/experiment::mnist-1/split::0/train-size::0080/overlap::1.00/image-sum-block-train.txt"
                ],
                "validation": [
                    "../data/experiment::mnist-1/split::0/train-size::0040/overlap::0.00/image-sum-block-valid.txt"
                ],
                "infer": [
                    "../data/experiment::mnist-1/split::0/train-size::0080/overlap::1.00/image-sum-block-test.txt"
                ]
            }
        },
        "Carry/3": {
            "targets": {
                "learn": [
                    "../data/experiment::mnist-1/split::0/train-size::0080/overlap::1.00/carry-target-train.txt"
                ],
                "validation": [
                    "../data/experiment::mnist-1/split::0/train-size::0040/overlap::0.00/carry-target-valid.txt"
                ],
                "infer": [
                    "../data/experiment::mnist-1/split::0/train-size::0080/overlap::1.00/carry-target-test.txt"
                ]
            }
        },
        "DigitSumOnesPlace/4": {
            "observations": {
                "learn": [
                    "../data/experiment::mnist-1/digit-sum-ones-place-obs.txt"
                ],
                "validation": [
                    "../data/experiment::mnist-1/digit-sum-ones-place-obs.txt"
                ],
                "infer": [
                    "../data/experiment::mnist-1/digit-sum-ones-place-obs.txt"
                ]
            }
        },
        "DigitSumTensPlace/4": {
            "observations": {
                "learn": [
                    "../data/experiment::mnist-1/digit-sum-tens-place-obs.txt"
                ],
                "validation": [
                    "../data/experiment::mnist-1/digit-sum-tens-place-obs.txt"
                ],
                "infer": [
                    "../data/experiment::mnist-1/digit-sum-tens-place-obs.txt"
                ]
            }
        },
        "PlacedRepresentation/3": {
            "observations": {
                "learn": [
                    "../data/experiment::mnist-1/placed-representation.txt"
                ],
                "validation": [
                    "../data/experiment::mnist-1/placed-representation.txt"
                ],
                "infer": [
                    "../data/experiment::mnist-1/placed-representation.txt"
                ]
            }
        }
    }
}