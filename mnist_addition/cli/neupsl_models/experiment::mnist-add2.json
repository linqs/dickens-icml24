{
    "options": {
        "inference.normalize": false,
        "runtime.db.intids": true,
        "runtime.log.level": "TRACE",
        "runtime.learn.method": "BinaryCrossEntropy",
        "runtime.validation": true,
        "gradientdescent.savevalidationweights": true,
        "categoricalevaluator.defaultpredicate": "ImageSum",
        "gradientdescent.numsteps": "5000",
        "gradientdescent.trainingcomputeperiod": 10,
        "gradientdescent.validationcomputeperiod": 10,
        "gradientdescent.runfulliterations": "false",
        "gradientdescent.stepsize": "1.0e-3",
        "weightlearning.inference": "DualBCDInference",
        "runtime.inference.method": "DualBCDInference",
        "duallcqp.computeperiod": "10",
        "duallcqp.maxiterations": "10000",
        "duallcqp.primaldualthreshold": "0.001",
        "duallcqp.regularizationparameter": "1.0e-3",
        "gradientdescent.negativeentropyregularization": "0.0",
        "gradientdescent.negativelogregularization": "1.0e-2",
        "minimizer.initialsquaredpenalty": "10.0",
        "minimizer.objectivedifferencetolerance": "0.001",
        "minimizer.proxruleweight": "1.0",
        "runtime.learn.output.model.path": "./mnist-addition_learned.psl",
        "gradientdescent.scalestepsize": "false"
    },
    "rules": [
        "1.0: 0 * ImageSumBlock(ImageId1, ImageId2, ImageId3, ImageId4) + 0 * DigitSumOnesPlace('0', X, Y, Z) + NeuralClassifier(ImageId2, X) + NeuralClassifier(ImageId4, Y) <= SumPlace(ImageId1, ImageId2, ImageId3, ImageId4, '1', Z) + 1.0 ",
        "1.0: 0 * ImageSumBlock(ImageId1, ImageId2, ImageId3, ImageId4) + 0 * DigitSumOnesPlace('0', X, Y, Z) + SumPlace(ImageId1, ImageId2, ImageId3, ImageId4, '1', Z) + NeuralClassifier(ImageId2, X) <= NeuralClassifier(ImageId4, Y) + 1.0 ",
        "1.0: 0 * ImageSumBlock(ImageId1, ImageId2, ImageId3, ImageId4) + 0 * DigitSumOnesPlace('0', X, Y, Z) + NeuralClassifier(ImageId4, Y) + SumPlace(ImageId1, ImageId2, ImageId3, ImageId4, '1', Z) <= NeuralClassifier(ImageId2, X) + 1.0 ",

        "1.0: 0 * ImageSumBlock(ImageId1, ImageId2, ImageId3, ImageId4) + 0 * DigitSumTensPlace('0', X, Y, Z) + NeuralClassifier(ImageId2, X) + NeuralClassifier(ImageId4, Y) <= Carry(ImageId2, ImageId4, Z) + 1.0 ",

        "1.0: 0 * ImageSumBlock(ImageId1, ImageId2, ImageId3, ImageId4) + 0 * DigitSumOnesPlace(W, X, Y, Z) + NeuralClassifier(ImageId1, X) + NeuralClassifier(ImageId3, Y) + Carry(ImageId2, ImageId4, W) <= SumPlace(ImageId1, ImageId2, ImageId3, ImageId4, '10', Z) + 2.0 ",
        "1.0: 0 * ImageSumBlock(ImageId1, ImageId2, ImageId3, ImageId4) + 0 * DigitSumOnesPlace(W, X, Y, Z) + SumPlace(ImageId1, ImageId2, ImageId3, ImageId4, '10', Z) + NeuralClassifier(ImageId1, X) + NeuralClassifier(ImageId3, Y) <= Carry(ImageId2, ImageId4, W) + 2.0 ",
        "1.0: 0 * ImageSumBlock(ImageId1, ImageId2, ImageId3, ImageId4) + 0 * DigitSumOnesPlace(W, X, Y, Z) + Carry(ImageId2, ImageId4, W) + SumPlace(ImageId1, ImageId2, ImageId3, ImageId4, '10', Z) + NeuralClassifier(ImageId1, X) <= NeuralClassifier(ImageId3, Y) + 2.0 ",
        "1.0: 0 * ImageSumBlock(ImageId1, ImageId2, ImageId3, ImageId4) + 0 * DigitSumOnesPlace(W, X, Y, Z) + NeuralClassifier(ImageId3, Y) + Carry(ImageId2, ImageId4, W) + SumPlace(ImageId1, ImageId2, ImageId3, ImageId4, '10', Z) <= NeuralClassifier(ImageId1, X) + 2.0 ",

        "1.0: 0 * ImageSumBlock(ImageId1, ImageId2, ImageId3, ImageId4) + 0 * DigitSumTensPlace(W, X, Y, Z) + NeuralClassifier(ImageId1, X) + NeuralClassifier(ImageId3, Y) + Carry(ImageId2, ImageId4, W) <= SumPlace(ImageId1, ImageId2, ImageId3, ImageId4, '100', Z) + 2.0 ",

        "0 * ImageSumBlock(ImageId1, ImageId2, ImageId3, ImageId4) + 0 * DigitSumOnesPlace(W, '0', '0', Z) + Carry(ImageId1, ImageId3, W) = SumPlace(ImageId1, ImageId2, ImageId3, ImageId4, '100', Z) .",

        "0 * ImageSumBlock(ImageId1, ImageId2, ImageId3, ImageId4) + 0 * PlacedRepresentation(Z_100, Z_10, Z_1, Z) + ImageSum(ImageId1, ImageId2, ImageId3, ImageId4, Z) <= SumPlace(ImageId1, ImageId2, ImageId3, ImageId4, '1', Z_1) .",
        "0 * ImageSumBlock(ImageId1, ImageId2, ImageId3, ImageId4) + 0 * PlacedRepresentation(Z_100, Z_10, Z_1, Z) + ImageSum(ImageId1, ImageId2, ImageId3, ImageId4, Z) <= SumPlace(ImageId1, ImageId2, ImageId3, ImageId4, '10', Z_10) .",
        "0 * ImageSumBlock(ImageId1, ImageId2, ImageId3, ImageId4) + 0 * PlacedRepresentation(Z_100, Z_10, Z_1, Z) + ImageSum(ImageId1, ImageId2, ImageId3, ImageId4, Z) <= SumPlace(ImageId1, ImageId2, ImageId3, ImageId4, '100', Z_100) .",

        "0 * ImageSumBlock(ImageId1, ImageId2, ImageId3, ImageId4) + 0 * PlacedRepresentation(Z_100, Z_10, Z_1, Z) + SumPlace(ImageId1, ImageId2, ImageId3, ImageId4, '1', Z_1) + SumPlace(ImageId1, ImageId2, ImageId3, ImageId4, '10', Z_10) + SumPlace(ImageId1, ImageId2, ImageId3, ImageId4, '100', Z_100) <= ImageSum(ImageId1, ImageId2, ImageId3, ImageId4, Z) + 2.0 .",
        "0 * ImageSumBlock(ImageId1, ImageId2, ImageId3, ImageId4) + 0 * PlacedRepresentation(Z_100, Z_10, Z_1, Z) + ImageSum(ImageId1, ImageId2, ImageId3, ImageId4, Z) + SumPlace(ImageId1, ImageId2, ImageId3, ImageId4, '1', Z_1) + SumPlace(ImageId1, ImageId2, ImageId3, ImageId4, '10', Z_10) <= SumPlace(ImageId1, ImageId2, ImageId3, ImageId4, '100', Z_100) + 2.0 .",
        "0 * ImageSumBlock(ImageId1, ImageId2, ImageId3, ImageId4) + 0 * PlacedRepresentation(Z_100, Z_10, Z_1, Z) + SumPlace(ImageId1, ImageId2, ImageId3, ImageId4, '100', Z_100) + ImageSum(ImageId1, ImageId2, ImageId3, ImageId4, Z) + SumPlace(ImageId1, ImageId2, ImageId3, ImageId4, '1', Z_1) <= SumPlace(ImageId1, ImageId2, ImageId3, ImageId4, '10', Z_10) + 2.0 .",
        "0 * ImageSumBlock(ImageId1, ImageId2, ImageId3, ImageId4) + 0 * PlacedRepresentation(Z_100, Z_10, Z_1, Z) + SumPlace(ImageId1, ImageId2, ImageId3, ImageId4, '10', Z_10) + SumPlace(ImageId1, ImageId2, ImageId3, ImageId4, '100', Z_100) + ImageSum(ImageId1, ImageId2, ImageId3, ImageId4, Z) <= SumPlace(ImageId1, ImageId2, ImageId3, ImageId4, '1', Z_1) + 2.0 .",

        "1.0: 0 * ImageSumBlock(ImageId1, ImageId2, ImageId3, ImageId4) + NeuralClassifier(ImageId1, +X) <= 1 - ImageSum(ImageId1, ImageId2, ImageId3, ImageId4, Z) {X: !PossibleTensDigit(X, Z)}",
        "1.0: 0 * ImageSumBlock(ImageId1, ImageId2, ImageId3, ImageId4) + NeuralClassifier(ImageId3, +X) <= 1 - ImageSum(ImageId1, ImageId2, ImageId3, ImageId4, Z) {X: !PossibleTensDigit(X, Z)}",

        "1.0: 0 * ImageSumBlock(ImageId1, ImageId2, ImageId3, ImageId4) + NeuralClassifier(ImageId2, +X) <= 1 - ImageSum(ImageId1, ImageId2, ImageId3, ImageId4, Z) {X: !PossibleOnesDigit(X, Z)}",
        "1.0: 0 * ImageSumBlock(ImageId1, ImageId2, ImageId3, ImageId4) + NeuralClassifier(ImageId4, +X) <= 1 - ImageSum(ImageId1, ImageId2, ImageId3, ImageId4, Z) {X: !PossibleOnesDigit(X, Z)}",

        "ImageSum(ImageId1, ImageId2, ImageId3, ImageId4, +Number) = 1 .",
        "SumPlace(ImageId1, ImageId2, ImageId3, ImageId4, P, +Z) = 1 .",
        "SumPlace(ImageId1, ImageId2, ImageId3, ImageId4, '100', '2') = 0 .",
        "SumPlace(ImageId1, ImageId2, ImageId3, ImageId4, '100', '3') = 0 .",
        "SumPlace(ImageId1, ImageId2, ImageId3, ImageId4, '100', '4') = 0 .",
        "SumPlace(ImageId1, ImageId2, ImageId3, ImageId4, '100', '5') = 0 .",
        "SumPlace(ImageId1, ImageId2, ImageId3, ImageId4, '100', '6') = 0 .",
        "SumPlace(ImageId1, ImageId2, ImageId3, ImageId4, '100', '7') = 0 .",
        "SumPlace(ImageId1, ImageId2, ImageId3, ImageId4, '100', '8') = 0 .",
        "SumPlace(ImageId1, ImageId2, ImageId3, ImageId4, '100', '9') = 0 .",
        "Carry(ImageIdX, ImageIdY, +W) = 1 ."
    ],
    "predicates": {
        "NeuralClassifier/2": {
            "type": "DeepPredicate",
            "options": {
                "model-path": "./neupsl_models/neupsl_neural_model.py::MNISTAdditionModel",
                "entity-data-map-path": "../data/experiment::mnist-2/split::0/train-size::0040/overlap::0.00/entity-data-map.txt",
                "entity-argument-indexes": "0",
                "class-size": 10,
                "save-path": "../data/experiment::mnist-2/split::0/train-size::0040/overlap::0.00/saved-networks/nesy-trained/trained_model.pt",
                "loss_alpha": 0.5,
                "learning-rate": "1.0e-3",
                "dropout": 0.2
            },
            "targets": {
                "learn": [
                    "../data/experiment::mnist-2/split::0/train-size::0040/overlap::0.00/image-target-train.txt"
                ],
                "validation": [
                    "../data/experiment::mnist-2/split::0/train-size::0040/overlap::0.00/image-target-valid.txt"
                ],
                "infer": [
                    "../data/experiment::mnist-2/split::0/train-size::0040/overlap::0.00/image-target-test.txt"
                ]
            }
        },
        "ImageSum/5": {
            "evaluations": [
                {
                    "evaluator": "CategoricalEvaluator",
                    "options": {
                        "categoricalevaluator.categoryindexes": 4,
                        "eval.includeobs": false
                    }
                }
            ],
            "targets": {
                "learn": [
                    "../data/experiment::mnist-2/split::0/train-size::0040/overlap::0.00/image-sum-target-train.txt"
                ],
                "validation": [
                    "../data/experiment::mnist-2/split::0/train-size::0040/overlap::0.00/image-sum-target-valid.txt"
                ],
                "infer": [
                    "../data/experiment::mnist-2/split::0/train-size::0040/overlap::0.00/image-sum-target-test.txt"
                ]
            },
            "truth": {
                "learn": [
                    "../data/experiment::mnist-2/split::0/train-size::0040/overlap::0.00/image-sum-truth-train.txt"
                ],
                "validation": [
                    "../data/experiment::mnist-2/split::0/train-size::0040/overlap::0.00/image-sum-truth-valid.txt"
                ],
                "infer": [
                    "../data/experiment::mnist-2/split::0/train-size::0040/overlap::0.00/image-sum-truth-test.txt"
                ]
            }
        },
        "SumPlace/6": {
            "evaluations": [
                {
                    "evaluator": "CategoricalEvaluator",
                    "options": {
                        "categoricalevaluator.categoryindexes": 5,
                        "eval.includeobs": false
                    }
                }
            ],
            "options": {
                "batch-source": false
            },
            "targets": {
                "learn": [
                    "../data/experiment::mnist-2/split::0/train-size::0040/overlap::0.00/image-sum-place-target-train.txt"
                ],
                "validation": [
                    "../data/experiment::mnist-2/split::0/train-size::0040/overlap::0.00/image-sum-place-target-valid.txt"
                ],
                "infer": [
                    "../data/experiment::mnist-2/split::0/train-size::0040/overlap::0.00/image-sum-place-target-test.txt"
                ]
            },
            "truth": {
                "learn": [
                    "../data/experiment::mnist-2/split::0/train-size::0040/overlap::0.00/image-sum-place-truth-train.txt"
                ],
                "validation": [
                    "../data/experiment::mnist-2/split::0/train-size::0040/overlap::0.00/image-sum-place-truth-valid.txt"
                ],
                "infer": [
                    "../data/experiment::mnist-2/split::0/train-size::0040/overlap::0.00/image-sum-place-truth-test.txt"
                ]
            }
        },
        "ImageSumBlock/4": {
            "observations": {
                "learn": [
                    "../data/experiment::mnist-2/split::0/train-size::0040/overlap::0.00/image-sum-block-train.txt"
                ],
                "validation": [
                    "../data/experiment::mnist-2/split::0/train-size::0040/overlap::0.00/image-sum-block-valid.txt"
                ],
                "infer": [
                    "../data/experiment::mnist-2/split::0/train-size::0040/overlap::0.00/image-sum-block-test.txt"
                ]
            }
        },
        "Carry/3": {
            "targets": {
                "learn": [
                    "../data/experiment::mnist-2/split::0/train-size::0040/overlap::0.00/carry-target-train.txt"
                ],
                "validation": [
                    "../data/experiment::mnist-2/split::0/train-size::0040/overlap::0.00/carry-target-valid.txt"
                ],
                "infer": [
                    "../data/experiment::mnist-2/split::0/train-size::0040/overlap::0.00/carry-target-test.txt"
                ]
            }
        },
        "DigitSumOnesPlace/4": {
            "observations": {
                "learn": [
                    "../data/experiment::mnist-2/digit-sum-ones-place-obs.txt"
                ],
                "validation": [
                    "../data/experiment::mnist-2/digit-sum-ones-place-obs.txt"
                ],
                "infer": [
                    "../data/experiment::mnist-2/digit-sum-ones-place-obs.txt"
                ]
            }
        },
        "DigitSumTensPlace/4": {
            "observations": {
                "learn": [
                    "../data/experiment::mnist-2/digit-sum-tens-place-obs.txt"
                ],
                "validation": [
                    "../data/experiment::mnist-2/digit-sum-tens-place-obs.txt"
                ],
                "infer": [
                    "../data/experiment::mnist-2/digit-sum-tens-place-obs.txt"
                ]
            }
        },
        "PlacedRepresentation/4": {
            "observations": {
                "learn": [
                    "../data/experiment::mnist-2/placed-representation.txt"
                ],
                "validation": [
                    "../data/experiment::mnist-2/placed-representation.txt"
                ],
                "infer": [
                    "../data/experiment::mnist-2/placed-representation.txt"
                ]
            }
        },
        "PossibleTensDigit/2": {
            "observations": {
                "learn": [
                    "../data/experiment::mnist-2/possible-tens-digit-obs.txt"
                ],
                "validation": [
                    "../data/experiment::mnist-2/possible-tens-digit-obs.txt"
                ],
                "infer": [
                    "../data/experiment::mnist-2/possible-tens-digit-obs.txt"
                ]
            }
        },
        "PossibleOnesDigit/2": {
            "observations": {
                "learn": [
                    "../data/experiment::mnist-2/possible-ones-digit-obs.txt"
                ],
                "validation": [
                    "../data/experiment::mnist-2/possible-ones-digit-obs.txt"
                ],
                "infer": [
                    "../data/experiment::mnist-2/possible-ones-digit-obs.txt"
                ]
            }
        }
    }
}
